def getStartState(self):
        """
        Returns the start state (in your state space, not the full Pacman state
        space)
        """
        "*** YOUR CODE HERE ***"

        return (self.startingPosition,[])
        util.raiseNotDefined()

    def isGoalState(self, state):
        """
        Returns whether this search state is a goal state of the problem.
        """
        "*** YOUR CODE HERE ***"
        coordinates=state[0]
        corners_visited=state[1]

        if coordinates in self.corners:
            if coordinates not in corners_visited: corners_visited.append(coordinates)

        if len(corners_visited) == 4: isGoal= True
        else: isGoal=False

        # For display purposes only
        if isGoal and self.visualize:
            self._visitedlist.append(state[0])
            import __main__
            if '_display' in dir(__main__):
                if 'drawExpandedCells' in dir(__main__._display): #@UndefinedVariable
                    __main__._display.drawExpandedCells(self._visitedlist) #@UndefinedVariable

        return isGoal
        util.raiseNotDefined()

    def getSuccessors(self, state):
        """
        Returns successor states, the actions they require, and a cost of 1.

         As noted in search.py:
            For a given state, this should return a list of triples, (successor,
            action, stepCost), where 'successor' is a successor to the current
            state, 'action' is the action required to get there, and 'stepCost'
            is the incremental cost of expanding to that successor
        """

        successors = []
        for action in [Directions.NORTH, Directions.SOUTH, Directions.EAST, Directions.WEST]:
            # Add a successor state to the successor list if the action is legal
            # Here's a code snippet for figuring out whether a new position hits a wall:
            #   x,y = currentPosition
            #   dx, dy = Actions.directionToVector(action)
            #   nextx, nexty = int(x + dx), int(y + dy)
            #   hitsWall = self.walls[nextx][nexty]

            "*** YOUR CODE HERE ***"

            x,y = state[0]
            corners_visited=state[1]
            dx, dy = Actions.directionToVector(action)
            nextx, nexty = int(x + dx), int(y + dy)

            if not self.walls[nextx][nexty]:
                nextCord = (nextx, nexty)
                cost = 1 

                if nextCord in self.corners:
                    if nextCord not in corners_visited:
                        corners_visited.append(nextCord)
                
                
                successors.append( ((nextCord,corners_visited),action, cost) )
  

        self._expanded += 1 # DO NOT CHANGE

        # Bookkeeping for display purposes
        if state[0] not in self._visited:
            self._visited[state[0]] = True
            self._visitedlist.append(state[0])
            
        return successors

